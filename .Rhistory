apply(matrix(c(1:4,9,5:7)),1,sd)
apply(matrix(c(1:4,9,5:7)),2,sd)
apply(matrix(c(1:4,9,5:7),nrow=2),2,sd)
apply(matrix(c(1:4,9,5:7),nrow=2),1,sd)
sd(apply(matrix(c(1:4,9,5:7),nrow=2),1,sd))
as.vector(mat)
mat=matrix(c(1:4,9,5:7),nrow=2)
as.vector(mat)
c(mat)
mat
sd(mat)
mean(mat)
mat=matrix(c(1:4,9,5:7),nrow=2)
sd(mat)
mean(mat)
sd(apply(mat,1,sd))
sd(apply(mat,2,sd))
#exercice 4
center = function(mat){
sweep(mat,1:2,mean(apply(mat,1,mean)),"-")
sweep(mat,1:2,sd(mat),"/")
}
center(matrix(c(1:4,9,5:7),nrow=2))
#exercice 4
center = function(mat){
sweep(mat,1:2,apply(mat,1,mean),"-")
sweep(mat,1:2,apply(mat,1,sd),"/")
}
center(matrix(c(1:4,9,5:7),nrow=2))
#exercice 4
center = function(mat){
sweep(mat,1:2,apply(mat,2,mean),"-")
sweep(mat,1:2,apply(mat,2,sd),"/")
}
center(matrix(c(1:4,9,5:7),nrow=2))
#exercice 4
center = function(mat){
sweep(mat,2,apply(mat,2,mean),"-")
sweep(mat,2,apply(mat,2,sd),"/")
}
center(matrix(c(1:4,9,5:7),nrow=2))
x=c(70,74,79,80,73,77,78,67,82,81,80,76,71,75,73,82,90,78,71,78,74,75,77,78,79)
boxplot(x)
t.test(x,mu=75,alternative='greater')
summary(x)
mean(x)
x <- c(73.2,72.6,74.0,75.0,75.5,73.7,74.1,75.8,74.8,75.0) > mean(x)
sd(x)
res=t.test(x,mu=75,alternative='less'); res
Tobs=res$statistic; Tobs
n=length(x)
curve(dt(x,df=n-1),from=-5,to=5) > q=qt(p=0.01,df=n-1); q
abline(v=q,col='red')
abline(v=Tobs)
library(FactoMineR)
chaise = read.table('/Users/ferdjaouiamine/Desktop/University/Analyse/td6/chaise.txt')
chaise
res.chaise = PCA(chaise,scale.unit = T)
res.chaise = PCA(chaise,scale.unit = T, ncp=5 )
dimdesc(res.chaise,axes=c(1,2))
chaise = read.table('/Users/ferdjaouiamine/Desktop/University/Analyse/td6/chaise.txt')
chaise
res.chaise = PCA(chaise,scale.unit = T)
res.chaise = PCA(chaise,scale.unit = T, ncp=5)
dimdesc(res.chaise,axes=c(1,2))
res.chaise = PCA(chaise,scale.unit = T, ncp=5)
res.chaise = PCA(chaise,scale.unit = T)
res.chaise = PCA(chaise,scale.unit = T, ncp=5)
res.chaise = PCA(chaise,scale.unit = T)
res.chaise = PCA(chaise,scale.unit = T, ncp=5)
res.chaise = PCA(chaise,scale.unit = F)
res.chaise = PCA(chaise,scale.unit = T)
plot.PCA(chaise,choix=c("ind", "var"))
plot.PCA(chaise)
plot.PCA(res.chaise)
plot.PCA(res.chaise)
res.chaise = PCA(chaise,scale.unit = T)
plot.PCA(res.chaise, choix=c("ind", "var"))
plot.PCA(res.chaise, axes = c(1,2), choix=c("ind", "var"))
plot.PCA(res.chaise, axes = c(1,2))
plot.PCA(res.chaise, axes = c(1,2))
plot.PCA(res.chaise,choix="var")
plot(chaise)
library(FactoMineR)
res.chaise = PCA(chaise,scale.unit = T, ncp=2)
res.chaise = PCA(chaise[,1:3],scale.unit = T, ncp=2)
res.chaise = PCA(chaise[,1:2],scale.unit = T, ncp=2)
res.chaise = PCA(chaise,scale.unit = T, ncp=2)
res.chaise = PCA(chaise,scale.unit = T)
summary(res.chaise)
;
;
summary(res.chaise)
chaise = read.table('/Users/ferdjaouiamine/Desktop/University/Analyse/td6/chaise.txt')
chaise
res.chaise = PCA(chaise,scale.unit = T)
res.chaise = PCA(chaise,scale.unit = T)
library(FactoMineR)
res.chaise = PCA(chaise,scale.unit = T)
summary(res.chaise)
res.chaise = PCA(chaise,scale.unit = T,file="aa.pdf")
pdf("fich.pdf")
pdf("fich.pdf")
print(fich)
print(res.chaise)
dev.off()
library(factoextra)
library(Factoextra)
library(FactoExtra)
getwd()
pdf('/Users/ferdjaouiamine/Desktop/fich.pdf')
res.chaise = PCA(chaise,scale.unit = T)
res.chaise = PCA(chaise,scale.unit = T)
library(FactoMineR)
chaise = read.table('/Users/ferdjaouiamine/Desktop/University/Analyse/td6/chaise.txt')
chaise
res.chaise = PCA(chaise,scale.unit = T)
res.chaise = PCA(chaise,scale.unit = T)
res.chaise = PCA(chaise,scale.unit = T)
res.chaise = PCA(chaise,scale.unit = F)
library(FactoMineR)
chaise = read.table('/Users/ferdjaouiamine/Desktop/University/Analyse/td6/chaise.txt')
chaise
res.chaise = PCA(chaise,scale.unit = T)
pdf('/Users/ferdjaouiamine/Desktop/fich.pdf')
pdf('/Users/ferdjaouiamine/Desktop/fich.pdf')
dev.off()
res.chaise = PCA(chaise,scale.unit = T)
library(FactoMineR)
chaise = read.table('/Users/ferdjaouiamine/Desktop/University/Analyse/td6/chaise.txt')
chaise
res.chaise = PCA(chaise,scale.unit = T)
pdf('/Users/ferdjaouiamine/Desktop/fich.pdf')
print(res.chaise)
dev.off()
res.chaise = PCA(chaise,scale.unit = T)
pdf('/Users/ferdjaouiamine/Desktop/fich.pdf')
dev.off()
pdf('/Users/ferdjaouiamine/Desktop/fich.png')
dev.off()
library("e1071")
x = data.frame(x1=c(1,2,4,6,8,5,7,9,12,13),x2=c(3,1,5,9,7,1,1,4,7,6),y=as.factor(c(-1,-1,-1,-1,-1,1,1,1,1,1)))
plot(x[,-3],col=x$y)
s = svm(x=x ,y=x$y,kernel = "linear", cost = 100000, scale = FALSE, tol = 0.00000001, shrinkage = FALSE)
points(s$SV[,1],s$SV[,2], col = "blue")
s$rho
s$coefs
s$decision.values
s$SV
w1=sum(s$coefs * x[,1][s$index])
w2=sum(s$coefs * x[,2][s$index])
w0=-s$rho
w1;w2
a=-w1/w2;a
b=-w0/w2;b
abline(b,a)
points(2,6,col="green")
xx=c(2,6)
f=sum(s$coefs)
sum=0
for (i in seq(1,3)) {
sum = sum + ((xx[1]*x$x1[i])+(xx[2]*x$x2[i])) * s$coefs[i]
}
fx=sum+w0;fx
s$coefs
s$coefs
x[,1]
x[,1][s$index]
#----------- ex2 -----------
path = "/Users/ferdjaouiamine/Desktop/University/Data\ science/SVM/data_nonLinear"
#----------- ex2 -----------
dtrain = "/Users/ferdjaouiamine/Desktop/University/Data\ science/SVM/data_nonLinear/dtrain_nonLinear.txt"
dtest = "/Users/ferdjaouiamine/Desktop/University/Data\ science/SVM/data_nonLinear/dtest_nonLinear.txt"
dtrain = read.table(dtrain)
dtrain
plot(dtrain[,-3])
plot(dtrain[,-3],col=dtrain$V3)
plot(dtest[,-3],col=dtest$V3)
dtest = read.table(dtest)
plot(dtest[,-3],col=dtest$V3)
plot(dtrain[,-3],col=dtrain$V3)
plot(dtest[1,-3],col=dtest$V3)
points(dtrain[1,1],dtrain[1,1],col=dtrain$V3)
points(dtrain[1,1],dtrain[1,2],col=dtrain$V3)
points(dtrain[,1],dtrain[,2],col=dtrain$V3)
dtrain = read.table(dtrain)
dtest = read.table(dtest)
#----------- ex2 -----------
dtrain = "/Users/ferdjaouiamine/Desktop/University/Data\ science/SVM/data_nonLinear/dtrain_nonLinear.txt"
dtest = "/Users/ferdjaouiamine/Desktop/University/Data\ science/SVM/data_nonLinear/dtest_nonLinear.txt"
dtrain = read.table(dtrain)
dtest = read.table(dtest)
points(dtrain[,1],dtrain[,2],col=dtrain$V3)
plot(dtrain[,-3],col=dtrain$V3)
plot(dtest[1,-3],col=dtest$V3)
points(dtrain[,1],dtrain[,2],col=dtrain$V3)
plot(dtrain[,-3],col=dtrain$V3)
points(dtrain[,1],dtrain[,2],col=dtrain$V3)
points(dtrain[,1],dtrain[,2],col=yellow)
points(dtrain[,1],dtrain[,2],col=green)
points(dtrain[,1],dtrain[,2],col="green")
plot(dtrain[,-3],col=dtrain$V3)
points(dtrain[1,1],dtrain[1,2],col="green")
plot(dtrain[,-3],col=dtrain$V3)
points(dtest[1,1],dtest[1,2],col=dtest$V3)
plot(dtrain[,-3],col=dtrain$V3)
points(dtest[,1],dtest[,2],col=dtest$V3)
plot(dtrain[,-3],col=dtrain$V3)
points(dtest[,1],dtest[,2],col=dtest$V3)
plot(dtrain[,-3],col=dtrain$V3)
points(dtest[,1],dtest[,2],col=dtest$V3)
plot(dtrain[,-3],col=dtrain$V3)
points(dtest[,1],dtest[,2],col=dtest$V3)
library('e1071')
# Load the dataset, get the observation and build X
conso.data.original <- read.csv(file="/Users/ferdjaouiamine/Desktop/University/Data\ science/MLR/vehicleConsumption.csv")
conso.data.original
# Load the dataset, get the observation and build X
conso.data.original <- read.csv(file="/Users/ferdjaouiamine/Desktop/University/Data\ science/MLR/vehicleConsumption.csv")
conso.obs <- conso.data.original[,4]
conso.data <- conso.data.original[,-4]
conso.data <- as.matrix(cbind(rep(1, nrow(conso.data)), conso.data))
conso.obs <- conso.data.original[,4];conso.obs
conso.data <- as.matrix(cbind(rep(1, nrow(conso.data)), conso.data));conso.data
# Compute a
conso.data.xtx <- (t(conso.data) %*% conso.data) conso.data.xtx.inv <- solve(conso.data.xtx)
# Compute a
conso.data.xtx <- (t(conso.data) %*% conso.data)
conso.data.xtx.inv <- solve(conso.data.xtx)
conso.data.xty <- (t(conso.data) %*% conso.obs)
conso.data.xtx.inv <- solve(conso.data.xtx)
# Load the dataset, get the observation and build X
conso.data.original <- read.csv(file="/Users/ferdjaouiamine/Desktop/University/Data\ science/MLR/vehicleConsumption.csv")
conso.obs <- conso.data.original[,4];conso.obs
conso.data <- conso.data.original[,-4]
conso.data <- as.matrix(cbind(rep(1, nrow(conso.data)), conso.data));conso.data
# Compute a
conso.data.xtx <- (t(conso.data) %*% conso.data)
conso.data.xtx.inv <- solve(conso.data.xtx)
conso.data.xty <- (t(conso.data) %*% conso.obs)
a.estimator <- as.vector(conso.data.xtx.inv %*% conso.data.xty)
a.estimator <- as.vector(conso.data.xtx.inv %*% conso.data.xty);a.estimator
conso.data
# Apply the lm() function
conso.lm.model <- lm(consumption ~. , data=conso.data.original)
# Apply the lm() function
conso.lm.model <- lm(consumption ~. , data=conso.data.original); conso.lm.model
consumption
?lm
conso.data.original
consumption ~.
conso.predict
conso.predict
for(iSample in 1:nrow(conso.data)){
conso.predict <- c(conso.predict, (t(as.vector(conso.data[iSample, 1:4])) %*% a.estimator))
}
# Apply the lm() function
conso.lm.model <- lm(consumption ~. , data=conso.data.original); conso.lm.model
conso.predict <- c()
for(iSample in 1:nrow(conso.data)){
conso.predict <- c(conso.predict, (t(as.vector(conso.data[iSample, 1:4])) %*% a.estimator))
}
conso.predict
conso.predict <- c()
for(iSample in 1:nrow(conso.data)){
conso.predict <- c(conso.predict, (t(as.vector(conso.data[iSample, 1:4])) %*% a.estimator))
}
conso.residual <- conso.obs-conso.predict
conso.SSR <- sum(conso.residual2)
conso.SSR <- sum(conso.residual*conso.residual)
conso.err.var <- conso.SSR/(nrow(conso.data)-length(a.estimator))
conso.err.sd <- sqrt(conso.err.var)
conso.varCov <- conso.err.var*conso.data.xtx.inv
conso.residual <- conso.obs-conso.predict
conso.SSR <- sum(conso.residual^2)
conso.err.var <- conso.SSR/(nrow(conso.data)-length(a.estimator))
conso.err.sd <- sqrt(conso.err.var)
#(2.f)
conso.varCov <- conso.err.var*conso.data.xtx.inv
#(3.a)
conso.mean <- mean(conso.obs)
conso.SST <- sum((conso.obs-conso.mean)^2)
conso.R2 <- 1-conso.SSR/conso.SST
#(3.b)
conso.R <- sqrt(conso.R2)
cor(conso.obs, conso.predict)
plot(x=conso.obs, y=conso.predict)
abline(a=0, b=1)
#(4.a)
nb.param <- length(a.estimator)-1
F.stat.global <- (conso.R2/(nb.param))/((1-conso.R2)/(nrow(conso.data)-(nb.param)-1))
#(5.a)
qf(0.95, df1=(nb.param), df2=(nrow(conso.data)-(nb.param)-1))
conso.R2
conso.err.sd
conso.err.sd
#(2.f)
conso.varCov <- conso.err.var*conso.data.xtx.inv
conso.varCov
#(3.b)
conso.R <- sqrt(conso.R2); conso.R
conso.R2
#(4.a)
nb.param <- length(a.estimator)-1
F.stat.global <- (conso.R2/(nb.param))/((1-conso.R2)/(nrow(conso.data)-(nb.param)-1))
#(4,b)
qf(0.95, df1=(nb.param), df2=(nrow(conso.data)-(nb.param)-1))
#(5.a)
qf(0.95, df1=(nb.param), df2=(nrow(conso.data)-(nb.param)-1))
#(5.b)
a.estimator.var <- as.vector(diag(conso.varCov)) t.stat <- a.estimator/sqrt(a.estimator.var)
#(5.b)
a.estimator.var <- as.vector(diag(conso.varCov))
t.stat <- a.estimator/sqrt(a.estimator.var)
#(5.b)
qt(0.975, df= (nrow(conso.data)-length(a.estimator)-1))
t.stat <- a.estimator/sqrt(a.estimator.var); t.test()
t.stat <- a.estimator/sqrt(a.estimator.var); t.test
t.stat <- a.estimator/sqrt(a.estimator.var); t.stat
#(5.b)
qt(0.975, df= (nrow(conso.data)-length(a.estimator)-1))
mean(t.stat)
#(5.b)
qt(0.975, df= (nrow(conso.data)-length(a.estimator)-1))
library("e1071")
x = data.frame(x1=c(1,2,4,6,8,5,7,9,12,13),x2=c(3,1,5,9,7,1,1,4,7,6),y=as.factor(c(-1,-1,-1,-1,-1,1,1,1,1,1)))
plot(x[,-3],col=x$y)
s = svm(x=x ,y=x$y,kernel = "linear", cost = 100000, scale = FALSE, tol = 0.00000001, shrinkage = FALSE)
points(s$SV[,1],s$SV[,2], col = "blue")
s$rho
s$coefs
s$decision.values
s$SV
w1=sum(s$coefs * x[,1][s$index])
w2=sum(s$coefs * x[,2][s$index])
w0=-s$rho
w1;w2
a=-w1/w2;a
b=-w0/w2;b
abline(b,a)
points(2,6,col="green")
points(s$SV[,1],s$SV[,2], col = "green")
points(2,6,col="blue")
s$coefs
s$rho
s$decision.values
w1;w2
sum=0
library('e1071')
# Load the dataset, get the observation and build X
conso.data.original <- read.csv(file="/Users/ferdjaouiamine/Desktop/University/Data\ science/MLR/vehicleConsumption.csv")
conso.obs <- conso.data.original[,4];conso.obs
conso.data <- as.matrix(cbind(rep(1, nrow(conso.data)), conso.data));conso.data
conso.data.original
# Compute a
conso.data.xtx <- (t(conso.data) %*% conso.data)
conso.data.xtx.inv <- solve(conso.data.xtx)
conso.data.xty <- (t(conso.data) %*% conso.obs)
a.estimator <- as.vector(conso.data.xtx.inv %*% conso.data.xty);a.estimator
# Compute a
conso.data.xtx <- (t(conso.data) %*% conso.data)
conso.data.xtx.inv <- solve(conso.data.xtx)
conso.data.xtx.inv <- solve(conso.data.xtx)
# Load the dataset, get the observation and build X
conso.data.original <- read.csv(file="/Users/ferdjaouiamine/Desktop/University/Data\ science/MLR/vehicleConsumption.csv")
conso.obs <- conso.data.original[,4];conso.obs
conso.data <- conso.data.original[,-4]
conso.data <- as.matrix(cbind(rep(1, nrow(conso.data)), conso.data));conso.data
conso.data.original
# Compute a
conso.data.xtx <- (t(conso.data) %*% conso.data)
conso.data.xtx.inv <- solve(conso.data.xtx)
conso.data.xty <- (t(conso.data) %*% conso.obs)
a.estimator <- as.vector(conso.data.xtx.inv %*% conso.data.xty);a.estimator
conso.data
conso.data
# Apply the lm() function
conso.lm.model <- lm(consumption ~. , data=conso.data.original); conso.lm.model
conso.predict <- c()
for(iSample in 1:nrow(conso.data)){
conso.predict <- c(conso.predict, (t(as.vector(conso.data[iSample, 1:4])) %*% a.estimator))
}
conso.residual <- conso.obs-conso.predict
a.estimator <- as.vector(conso.data.xtx.inv %*% conso.data.xty);a.estimator
# Apply the lm() function
conso.lm.model <- lm(consumption ~. , data=conso.data.original); conso.lm.model
conso.lm.model;a.estimator
# (2.a)
conso.predict <- c()
for(iSample in 1:nrow(conso.data)){
conso.predict <- c(conso.predict, (t(as.vector(conso.data[iSample, 1:4])) %*% a.estimator))
}
conso.residual <- conso.obs-conso.predict
conso.residual
conso.lm.model
#(2,d)
conso.SSR <- sum(conso.residual^2)
conso.err.var <- conso.SSR/(nrow(conso.data)-length(a.estimator))
conso.err.sd <- sqrt(conso.err.var)
conso.err.sd
#(2.f)
conso.varCov <- conso.err.var*conso.data.xtx.inv
conso.varCov
#(3.a)
conso.mean <- mean(conso.obs)
conso.SST <- sum((conso.obs-conso.mean)^2)
conso.R2 <- 1-conso.SSR/conso.SST
conso.R2
#(3.b)
conso.R <- sqrt(conso.R2); conso.R
cor(conso.obs, conso.predict)
plot(x=conso.obs, y=conso.predict)
abline(a=0, b=1)
#(4.a)
nb.param <- length(a.estimator)-1
F.stat.global <- (conso.R2/(nb.param))/((1-conso.R2)/(nrow(conso.data)-(nb.param)-1))
F.stat.global
#(4,b)
qf(0.95, df1=(nb.param), df2=(nrow(conso.data)-(nb.param)-1))
#(5.b)
a.estimator.var <- as.vector(diag(conso.varCov))
t.stat <- a.estimator/sqrt(a.estimator.var); t.stat
#(5.b)
qt(0.975, df= (nrow(conso.data)-length(a.estimator)-1))
x = c(1,2,3,3,3,4,5,6,6,7,8,9,9,11)
quantile(x)
library(shiny); runApp('Desktop/University/projet/projet.R')
runApp('Desktop/University/projet/projet.R')
runApp('Desktop/University/3:10:19/src_shiny_bidim/06_analyse_bidim_qualQual.R')
runApp('Desktop/University/projet/projet.R')
runApp('Desktop/University/projet/projet.R')
runApp('Desktop/University/projet')
runApp('Desktop/University/projet')
runApp('Desktop/University/projet')
runApp('Desktop/University/projet')
runApp('Desktop/University/3:10:19/src_shiny_bidim/07_analyse_bidim_qualQual_chiPhiTC.R')
runApp('Desktop/University/3:10:19/src_shiny_bidim/06_analyse_bidim_qualQual.R')
library(shiny); runApp('Desktop/University/projet/projet.R')
runApp('Desktop/University/3:10:19/src_shiny_bidim/07_analyse_bidim_qualQual_chiPhiTC.R')
runApp('Desktop/University/projet')
runApp('Desktop/University/projet')
runApp('Desktop/University/projet/projet.R')
x = 23
typeof(x)
which(x)
sapply(data, class)
sapply(x, class)
class
?class
iris
sapply(iris$Sepal.Length, class)
sapply(iris, class)
typeof(iris$Sepal.Length)
typeof(iris$Species.Length)
typeof(iris$Species)
sapply(iris, class)['Species']
x="Species"
sapply(iris, class)[x]
runApp('Desktop/University/projet/projet.R')
runApp('Desktop/University/projet/projet.R')
runApp('Desktop/University/projet/projet.R')
runApp('Desktop/University/projet/projet.R')
runApp('Desktop/University/projet/projet.R')
runApp('Desktop/University/projet/projet.R')
runApp('Desktop/University/projet/projet.R')
runApp('Desktop/University/projet/projet.R')
runApp('Desktop/University/3:10:19/src_shiny_bidim/05_analyse_bidim_quantQual.R')
runApp('Desktop/University/3:10:19/src_shiny_bidim/06_analyse_bidim_qualQual.R')
runApp('Desktop/University/projet/projet.R')
runApp('Desktop/University/projet/projet.R')
runApp('Desktop/University/projet/projet.R')
runApp('Desktop/University/projet/projet.R')
runApp('Desktop/University/projet/projet.R')
runApp('Desktop/University/projet/projet.R')
runApp('Desktop/University/projet')
runApp('Desktop/University/projet/projet.R')
library(grid)
library(jpeg)
install.packages("jpeg")
library(jpeg)
X <- readJPEG("face_1.jpg")
X <- readJPEG("./face_1.jpg")
#http://markheckmann.github.io/notes/svd_image_compression.html
#install.packages("jpeg", dependencies = T)
library(grid)
library(jpeg)
X <- readJPEG("./face_1.jpg")
X <- readJPEG("/Users/ferdjaouiamine/Desktop/University/Matrix Decom/8:10:2019/face_1.jpg")
class(X)
dim(X)
grid.raster(X)
qr(X)$rank # nbr de colonne d'une matrice linéairement indépendante
d <- svd(X)
k <- 1
X1 <- d$u[ ,1:k] %*% diag(d$d[1:k], nrow=k, ncol=k) %*% t(d$v[ , 1:k])
sum(X1 < 0 | X1 > 1) / prod(dim(X))   # proportion of values smaller 0 or bigger 1
X1[X1 < 0] <- 0
X1[X1 > 1] <- 1
grid.raster(X1)
for (k in 1:30) {
Xk <- d$u[ ,1:k] %*% diag(d$d[1:k], nrow=k, ncol=k) %*% t(d$v[ , 1:k])
Xk[Xk < 0] <- 0
Xk[Xk > 1] <- 1
grid.newpage()
grid.raster(Xk)
grid.text(paste("k = ",k), 0, 0, just = c("left", "bottom"), gp=gpar(cex=3))
}
? '%*%'
dim(X)
dim(X)
grid.raster(X)
library(shiny); runApp('Desktop/University/ShinyDataAnalysis-master/projet.R')
